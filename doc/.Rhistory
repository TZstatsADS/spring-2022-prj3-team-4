x_train<-x[-test_idx];y_train<-y[-test_idx]
x_test<-x[test_idx];y_test<-y[test_idx]
lpr_fit<-locpoly(x_train,y_train,degree=1,bandwidth=bw)
risk<-0
for (j in 1:length(x_test)){
xj<-x_test[j];yj<-y_test[j]
left<-min(which((xj-lpr_fit$x)<=0))
print(left)
y_pred<-lpr_fit$y[left]+(xj-lpr_fit$x[left])/(lpr_fit$x[left+1]-lpr_fit$x[left])*lpr_fit$y[left]
risk<-risk+(y_pred-yj)^2
}
rcv<-rcv+risk
}
Risk[i]<-rcv/5
}
minx<-min(x);maxx<-max(x)
y[-1]
y[-50]
h[-1]
#Note here we have M=1
set.seed(320)
h<-seq(0.05,0.5,0.05)
idx<-sample(1:50,replace=F)
Risk<-rep(NA,length(h))
for(i in 1:length(h)){
rcv<-0
bw<-h[i]
for (k in 0:4){
test_idx<-idx[(k*10+1):((k+1)*10)]
x_train<-x[-test_idx];y_train<-y[-test_idx]
x_test<-x[test_idx];y_test<-y[test_idx]
lpr_fit<-locpoly(x_train,y_train,degree=1,bandwidth=bw)
risk<-0
for (j in 1:length(x_test)){
xj<-x_test[j];yj<-y_test[j]
if (xj>=min(lpr_fit$x) &xj<max(lpr_fit$x)){
left<-min(which((xj-lpr_fit$x)<=0))
y_pred<-lpr_fit$y[left]+(xj-lpr_fit$x[left])/(lpr_fit$x[left+1]-lpr_fit$x[left])*lpr_fit$y[left]
}
else if (xj<min(lpr_fit$x)){
y_pred<-lpr_fit$y[1]-(lpr_fit$y[2]-lpr_fit$y[1])/(lpr_fit$x[2]-lpr_fit$x[1])*(lpr_fit$x[1]-xj)
}
else{
len<-length(lpr_fit$y)
y_pred<-lpr_fit$y[len]+(lpr_fit$y[len]-lpr_fit$y[len-1])/(lpr_fit$x[len]-lpr_fit$x[len-1])*(xj-lpr_fit$x[len])
}
risk<-risk+(y_pred-yj)^2
}
rcv<-rcv+risk
}
Risk[i]<-rcv/5
}
Risk
#Note here we have M=1
set.seed(320)
h<-seq(0.01,0.5,0.01)
idx<-sample(1:50,replace=F)
Risk<-rep(NA,length(h))
for(i in 1:length(h)){
rcv<-0
bw<-h[i]
for (k in 0:4){
test_idx<-idx[(k*10+1):((k+1)*10)]
x_train<-x[-test_idx];y_train<-y[-test_idx]
x_test<-x[test_idx];y_test<-y[test_idx]
lpr_fit<-locpoly(x_train,y_train,degree=1,bandwidth=bw)
risk<-0
for (j in 1:length(x_test)){
xj<-x_test[j];yj<-y_test[j]
if (xj>=min(lpr_fit$x) &xj<max(lpr_fit$x)){
left<-min(which((xj-lpr_fit$x)<=0))
y_pred<-lpr_fit$y[left]+(xj-lpr_fit$x[left])/(lpr_fit$x[left+1]-lpr_fit$x[left])*lpr_fit$y[left]
}
else if (xj<min(lpr_fit$x)){
y_pred<-lpr_fit$y[1]-(lpr_fit$y[2]-lpr_fit$y[1])/(lpr_fit$x[2]-lpr_fit$x[1])*(lpr_fit$x[1]-xj)
}
else{
len<-length(lpr_fit$y)
y_pred<-lpr_fit$y[len]+(lpr_fit$y[len]-lpr_fit$y[len-1])/(lpr_fit$x[len]-lpr_fit$x[len-1])*(xj-lpr_fit$x[len])
}
risk<-risk+(y_pred-yj)^2
}
rcv<-rcv+risk
}
Risk[i]<-rcv/5
}
print
Risk
#Note here we have M=1
cv_h<-function(seed=0,h=seq(0.05,0.5,0.05)){
set.seed(seed)
idx<-sample(1:50,replace=F)
Risk<-rep(NA,length(h))
for(i in 1:length(h)){
rcv<-0
bw<-h[i]
for (k in 0:4){
test_idx<-idx[(k*10+1):((k+1)*10)]
x_train<-x[-test_idx];y_train<-y[-test_idx]
x_test<-x[test_idx];y_test<-y[test_idx]
lpr_fit<-locpoly(x_train,y_train,degree=1,bandwidth=bw)
risk<-0
for (j in 1:length(x_test)){
xj<-x_test[j];yj<-y_test[j]
if (xj>=min(lpr_fit$x) &xj<max(lpr_fit$x)){
left<-min(which((xj-lpr_fit$x)<=0))
y_pred<-lpr_fit$y[left]+(xj-lpr_fit$x[left])/(lpr_fit$x[left+1]-lpr_fit$x[left])*lpr_fit$y[left]
}
else if (xj<min(lpr_fit$x)){
y_pred<-lpr_fit$y[1]-(lpr_fit$y[2]-lpr_fit$y[1])/(lpr_fit$x[2]-lpr_fit$x[1])*(lpr_fit$x[1]-xj)
}
else{
len<-length(lpr_fit$y)
y_pred<-lpr_fit$y[len]+(lpr_fit$y[len]-lpr_fit$y[len-1])/(lpr_fit$x[len]-lpr_fit$x[len-1])*(xj-lpr_fit$x[len])
}
risk<-risk+(y_pred-yj)^2
}
rcv<-rcv+risk
}
Risk[i]<-rcv/5
}
opt_h<-h[which.min(Risk)]
print('The optimal value of h given by the input sequence of bandwidth is',opt_h)
}
cv_h(320)
print(paste('The optimal value of h given by the input sequence of bandwidth is',opt_h,'.'))
#Note here we have M=1
cv_h<-function(seed=0,h=seq(0.05,0.5,0.05)){
set.seed(seed)
idx<-sample(1:50,replace=F)
Risk<-rep(NA,length(h))
for(i in 1:length(h)){
rcv<-0
bw<-h[i]
for (k in 0:4){
test_idx<-idx[(k*10+1):((k+1)*10)]
x_train<-x[-test_idx];y_train<-y[-test_idx]
x_test<-x[test_idx];y_test<-y[test_idx]
lpr_fit<-locpoly(x_train,y_train,degree=1,bandwidth=bw)
risk<-0
for (j in 1:length(x_test)){
xj<-x_test[j];yj<-y_test[j]
if (xj>=min(lpr_fit$x) &xj<max(lpr_fit$x)){
left<-min(which((xj-lpr_fit$x)<=0))
y_pred<-lpr_fit$y[left]+(xj-lpr_fit$x[left])/(lpr_fit$x[left+1]-lpr_fit$x[left])*lpr_fit$y[left]
}
else if (xj<min(lpr_fit$x)){
y_pred<-lpr_fit$y[1]-(lpr_fit$y[2]-lpr_fit$y[1])/(lpr_fit$x[2]-lpr_fit$x[1])*(lpr_fit$x[1]-xj)
}
else{
len<-length(lpr_fit$y)
y_pred<-lpr_fit$y[len]+(lpr_fit$y[len]-lpr_fit$y[len-1])/(lpr_fit$x[len]-lpr_fit$x[len-1])*(xj-lpr_fit$x[len])
}
risk<-risk+(y_pred-yj)^2
}
rcv<-rcv+risk
}
Risk[i]<-rcv/5
}
opt_h<-h[which.min(Risk)]
print(paste('The optimal value of h given by the input sequence of bandwidth is',opt_h,'.'))
}
cv_h(320)
apply(seed,1,cv_h)
seed<-seq(20,320,20)
apply(seed,1,cv_h)
apply(seed,2,cv_h)
lapply(seed,cv_h)
tapply(seed,cv_h)
sapply(seed,cv_h)
seed<-seq(20,320,20)
#Note here we have M=1
cv_h<-function(seed=0,h=seq(0.05,0.5,0.05)){
set.seed(seed)
idx<-sample(1:50,replace=F)
Risk<-rep(NA,length(h))
for(i in 1:length(h)){
rcv<-0
bw<-h[i]
for (k in 0:4){
test_idx<-idx[(k*10+1):((k+1)*10)]
x_train<-x[-test_idx];y_train<-y[-test_idx]
x_test<-x[test_idx];y_test<-y[test_idx]
lpr_fit<-locpoly(x_train,y_train,degree=1,bandwidth=bw)
risk<-0
for (j in 1:length(x_test)){
xj<-x_test[j];yj<-y_test[j]
if (xj>=min(lpr_fit$x) &xj<max(lpr_fit$x)){
left<-min(which((xj-lpr_fit$x)<=0))
y_pred<-lpr_fit$y[left]+(xj-lpr_fit$x[left])/(lpr_fit$x[left+1]-lpr_fit$x[left])*lpr_fit$y[left]
}
else if (xj<min(lpr_fit$x)){
y_pred<-lpr_fit$y[1]-(lpr_fit$y[2]-lpr_fit$y[1])/(lpr_fit$x[2]-lpr_fit$x[1])*(lpr_fit$x[1]-xj)
}
else{
len<-length(lpr_fit$y)
y_pred<-lpr_fit$y[len]+(lpr_fit$y[len]-lpr_fit$y[len-1])/(lpr_fit$x[len]-lpr_fit$x[len-1])*(xj-lpr_fit$x[len])
}
risk<-risk+(y_pred-yj)^2
}
rcv<-rcv+risk
}
Risk[i]<-rcv/5
}
opt_h<-h[which.min(Risk)]
return(h)
}
seed<-seq(20,320,20)
sapply(seed,cv_h)
#Note here we have M=1
cv_h<-function(seed=0,h=seq(0.05,0.5,0.05)){
set.seed(seed)
idx<-sample(1:50,replace=F)
Risk<-rep(NA,length(h))
for(i in 1:length(h)){
rcv<-0
bw<-h[i]
for (k in 0:4){
test_idx<-idx[(k*10+1):((k+1)*10)]
x_train<-x[-test_idx];y_train<-y[-test_idx]
x_test<-x[test_idx];y_test<-y[test_idx]
lpr_fit<-locpoly(x_train,y_train,degree=1,bandwidth=bw)
risk<-0
for (j in 1:length(x_test)){
xj<-x_test[j];yj<-y_test[j]
if (xj>=min(lpr_fit$x) &xj<max(lpr_fit$x)){
left<-min(which((xj-lpr_fit$x)<=0))
y_pred<-lpr_fit$y[left]+(xj-lpr_fit$x[left])/(lpr_fit$x[left+1]-lpr_fit$x[left])*lpr_fit$y[left]
}
else if (xj<min(lpr_fit$x)){
y_pred<-lpr_fit$y[1]-(lpr_fit$y[2]-lpr_fit$y[1])/(lpr_fit$x[2]-lpr_fit$x[1])*(lpr_fit$x[1]-xj)
}
else{
len<-length(lpr_fit$y)
y_pred<-lpr_fit$y[len]+(lpr_fit$y[len]-lpr_fit$y[len-1])/(lpr_fit$x[len]-lpr_fit$x[len-1])*(xj-lpr_fit$x[len])
}
risk<-risk+(y_pred-yj)^2
}
rcv<-rcv+risk
}
Risk[i]<-rcv/5
}
opt_h<-h[which.min(Risk)]
return(opt_h)
}
sapply(seed,cv_h)
table(sapply(seed,cv_h))
seed<-seq(0,1000,10)
table(sapply(seed,cv_h))
?table
seed<-seq(10,1000,10)
table(sapply(seed,cv_h))#
plot(x,y,main='Locally Linear Regression on optimal bandwidth')
lpr<-locpoly(x,y,degree=1,bandwidth=0.1)
lines(lpr,col=2,lwd=2)
legend('bottomright',legend='h=0.1',
fill=2,cex=1)
seed<-seq(10,1000,10)
table(sapply(seed,cv_h(h=seq(0.05,0.1,0.001))))#P(h=0.05)=0.25,P(h=0.1)=0.75
table(sapply(seed,cv_h,h=seq(0.05,0.1,0.001)))#P(h=0.05)=0.25,P(h=0.1)=0.75
hist(sapply(seed,cv_h,h=seq(0.05,0.1,0.001)))#P(h=0.05)=0.25,P(h=0.1)=0.75
hist(sapply(seed,cv_h,h=seq(0.05,0.1,0.001)),breaks='FD')#P(h=0.05)=0.25,P(h=0.1)=0.75
hist(sapply(seed,cv_h,h=seq(0.05,0.1,0.001)),breaks='FD')#P(h=0.05)=0.25,P(h=0.1)=0.75
hist(sapply(seed,cv_h,h=seq(0.05,0.1,0.001)),breaks=20)
#seed<-seq(10,1000,10)
#hist(sapply(seed,cv_h,h=seq(0.05,0.1,0.001)),breaks=20)
plot(x,y,main='Locally Linear Regression on optimal bandwidth')
lpr<-locpoly(x,y,degree=1,bandwidth=0.08)
lines(lpr,col=2,lwd=2)
legend('bottomright',legend='h=0.08',
fill=2,cex=1)
#seed<-seq(10,1000,10)
#hist(sapply(seed,cv_h,h=seq(0.05,0.1,0.001)),breaks=20)
plot(x,y,main='Locally Linear Regression on optimal bandwidth')
lpr01<-locpoly(x,y,degree=1,bandwidth=0.1)
lpr008<-locpoly(x,y,degree=1,bandwidth=0.08)
lines(lpr01,col=2,lwd=2)
lines(lpr008,col=3,lwd=2)
legend('bottomright',legend=c('h=0.1','h=0.08'),
fill=2:3,cex=1)
dt<-data.frame(label=c('A','B','C','D','E','F'),x1=c(1,1,3,5,3,3),x2=c(4,3,4,2,2,0))
library(cluster)
dist_mat <- dist(dt, method='manhattan')
dist_mat
View(dt)
dist_mat <- dist(dt[,2:3], method='manhattan')
dist_mat
hclust(dist_mat,method='single')
h<-hclust(dist_mat,method='single')
plot(h)
View(h)
h$merge
plot(h)
plot(h,ylim=c(0,2))
plot(h,ylim=c(0,3))
h<-hclust(dist_mat,method='single',hang=F)
plot(h,ylim=c(0,3),hang=F)
plot(h,ylim=c(0,3),hang=-1)
x1s<-0.4+rnorm(30,0,0.1)
y1s<-rnorm(30,0.5,0.2)
x2s<-rnorm(30,0.5,0.3)
y2s<-0.5+rnorm(30,0.1)
x<-c(x1s,x2s)
y<-c(y1s,y2s)
plot(x,y)
x1s<-0.4+rnorm(30,0,0.05)
x1s<-0.4+rnorm(100,0,0.05)
x2s<-rnorm(100,0.5,0.3)
y1s<-rnorm(100,0.5,0.2)
y2s<-0.5+rnorm(100,0,0.05)
x<-c(x1s,x2s)
y<-c(y1s,y2s)
plot(x,y)
PCA(x,y)
library(FactoMineR)
library(factoextra)
dt<-data.frame(x,y)
View(dt)
scale_dt<-dt%>%scale(scale=F)
library(dplyr)
scale_dt<-dt%>%scale(scale=F)
X_scale<-scale_dt[,-1]
y_scale<-scale_dt[,1]
res.pca<-PCA(X_scale,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca,addlabels=T,ylim=c(0,90))
fviz_pca_var(res.pca,col.var='contrib',
gradient.cols=c("green","grey","red"))
X_scale<-scale_dt
res.pca<-PCA(X_scale,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca,addlabels=T,ylim=c(0,90))
fviz_pca_var(res.pca,col.var='contrib',
gradient.cols=c("green","grey","red"))
x1s<-rnorm(100,0.2,0.01)
x2s<-rnorm(100,0.8,0.01)
y1s<-rnorm(100,0.8,0.01)
y2s<-rnorm(100,0.2,0.01)
x<-c(x1s,x2s)
y<-c(y1s,y2s)
dt<-data.frame(x,y)
scale_dt<-dt%>%scale(scale=F)
X_scale<-scale_dt
res.pca<-PCA(X_scale,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca,addlabels=T,ylim=c(0,90))
fviz_pca_var(res.pca,col.var='contrib',
gradient.cols=c("green","grey","red"))
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
sigma
xn<-mvrnorm(200,mu=mu,sigma=sigma)
?mvrnorm
library(MASS)
mu<-c(5,5,10)
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
xn<-mvrnorm(200,mu=mu,sigma=sigma)
xn<-mvrnorm(200,mu=mu,Sigma=sigma)
library(MASS)
mu<-c(5,5,10)
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
xn<-mvrnorm(200,mu=mu,Sigma=sigma)
View(xn)
library(FactoMineR)
library(factoextra)
scale_xn<-xn%>%scale(scale=F)
xn-mean(xn)
mean(xn)
apply(xn,2,mean)
xn-apply(xn,2,mean)
scale_xn<-xn%>%scale(scale=F)
res.pca<-PCA(scale_xn,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca,addlabels=T,ylim=c(0,90))
fviz_pca_var(res.pca,col.var='contrib',
gradient.cols=c("green","grey","red"))
scale_xn<-xn%>%scale(scale=F)
res.pca<-PCA(scale_xn,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
princomp(cor(scale_xn))
summary(princomp(cor(scale_xn)),loadings=T)
summary(princomp(scale_xn),loadings=T)
3.3919409^2
c(3.3919409,3.1974468,1.7047428)^2
eig.val
mu<-c(5,5,10)
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
xn<-mvrnorm(200,mu=mu,Sigma=sigma)
scale_xn<-xn%>%scale(scale=F)
res.pca<-PCA(scale_xn,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
cfviz_eig(res.pca,addlabels=T,ylim=c(0,90))
fviz_pca_var(res.pca,col.var='contrib',
gradient.cols=c("green","grey","red"))
mu<-c(5,5,10)
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
xn<-mvrnorm(200,mu=mu,Sigma=sigma)
scale_xn<-xn%>%scale(scale=F)
res.pca<-PCA(scale_xn,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
cfviz_eig(res.pca,addlabels=T,ylim=c(0,90))
fviz_pca_var(res.pca,col.var='contrib',
gradient.cols=c("green","grey","red"))
library(MASS)
library(FactoMineR)
library(factoextra)
mu<-c(5,5,10)
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
xn<-mvrnorm(200,mu=mu,Sigma=sigma)
scale_xn<-xn%>%scale(scale=F)
res.pca<-PCA(scale_xn,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca,addlabels=T,ylim=c(0,90))
fviz_pca_var(res.pca,col.var='contrib',
gradient.cols=c("green","grey","red"))
library(MASS)
library(FactoMineR)
library(factoextra)
mu<-c(5,5,10)
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
xn<-mvrnorm(200,mu=mu,Sigma=sigma)
scale_xn<-xn%>%scale(scale=F)
res.pca<-PCA(scale_xn,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca,addlabels=T,ylim=c(0,90))
fviz_pca_var(res.pca,col.var='contrib',
gradient.cols=c("green","grey","red"))
library(dplyr)
View(res.pca)
get_eig(res.pca)
get_eigenvalue(res.pca)
set.seed(100)
set.seed(100)
mu<-c(5,5,10)
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
xn<-mvrnorm(200,mu=mu,Sigma=sigma)
scale_xn<-xn%>%scale(scale=F)
res.pca<-PCA(scale_xn,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca,addlabels=T,ylim=c(0,90))
eigen(cor(scale_xn))
eigen(scale_xn%*%t(scale_xn))
eigen(t(scale_xn)%*%scale_xn)
princomp(scale_xn)
eig.val
a<-princomp(scale_xn)
View(a)
lin_com<-res.pca$svd$V[,1:2]
lin_com<-res.pca$svd$V
View(lin_com)
lin_com
View(a)
a$loadings
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
res.pca<-PCA(sigma,graph=F,scale.unit=F)
eig.val<-get_eigenvalue(res.pca)
eig.val
View(res.pca)
eig
res.pca$eig
View(res.pca)
eigval<-eigen(sigma)$values
eigvec<-eigen(sigma)$vectors
print(eigval/sum(eigval)*100)
print(cumsum(eigval)/sum(eigval)*100)
eigvec
sigma<-matrix(c(6,-3,0,-3,6,0,0,0,10),ncol=3)
eigval<-eigen(sigma)$values
eigvec<-eigen(sigma)$vectors
print(eigval/sum(eigval)*100)
print(cumsum(eigval)/sum(eigval)*100)
eigvec
lin_com
dt=read.csv('dt.csv')
setwd('D:/Columbia/2022 Spring/GR5243-Applied DS/Project3/doc')
dt=read.csv('dt.csv')
View(dt)
dt=read.csv('dt.csv',header=F)
View(a)
View(dt)
dt1=dt[dt$V1!=dt$V2,2]
dt$V2=factor(dt$V2)
dt1=dt[dt$V1!=dt$V2,2]
dt1
barplot(dt1)
dt=read.csv('dt.csv',header=F)
dt1=dt[dt$V1!=dt$V2,2]
dt1
barplot(dt1)
dt1=dt[dt$V1!=dt$V2,]
dt1
View(dt1)
dt=read.csv('dt.csv',header=F)
dt$V2=factor(dt$V2)
dt1=dt[dt$V1!=dt$V2,]
dt1
barplot(dt1$V2)
barplot(dt1)
View(dt1)
table(dt1$V2)
table(dt1)
table(dt1$V1);table(dt1$V2)
